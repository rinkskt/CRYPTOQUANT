"""
Dashboard component para exibi√ß√£o de sugest√µes do portf√≥lio.
"""

import streamlit as st
from typing import Dict, List
from ..suggestions import get_portfolio_suggestions
from ..portfolio_form import PortfolioPosition
import pandas as pd

def render_suggestions(portfolio: List[PortfolioPosition], history: pd.DataFrame):
    """Renderiza as sugest√µes do portf√≥lio em um componente Streamlit."""
    
    suggestions = get_portfolio_suggestions(portfolio, history)
    
    st.subheader("üìä Sugest√µes do Portf√≥lio")
    
    # An√°lise do portf√≥lio como um todo
    with st.expander("An√°lise Geral do Portf√≥lio", expanded=True):
        portfolio_analysis = suggestions["portfolio"]
        
        # Diversifica√ß√£o
        if portfolio_analysis.get("portfolio_diversified"):
            st.success("‚úÖ Portf√≥lio bem diversificado")
        else:
            st.warning("‚ö†Ô∏è Considere melhorar a diversifica√ß√£o do portf√≥lio")
        
        # Sugest√µes de rebalanceamento
        if portfolio_analysis.get("rebalance_suggestions"):
            st.write("Sugest√µes de rebalanceamento:")
            for suggestion in portfolio_analysis["rebalance_suggestions"]:
                st.info(f"üîÑ {suggestion}")
    
    # An√°lise individual das posi√ß√µes
    for pos_suggestion in suggestions["positions"]:
        symbol = pos_suggestion["symbol"]
        with st.expander(f"An√°lise: {symbol}"):
            
            # An√°lise de Stop Loss
            stop_analysis = pos_suggestion["stop_analysis"]
            if stop_analysis:
                st.subheader("Stop Loss")
                if stop_analysis.get("stop_too_tight"):
                    st.warning("‚ö†Ô∏è Stop loss muito apertado considerando a volatilidade")
                    st.write(f"Stop sugerido: {stop_analysis['suggested_stop']:.2f}")
                elif stop_analysis.get("stop_too_wide"):
                    st.warning("‚ö†Ô∏è Stop loss muito largo considerando a volatilidade")
                    st.write(f"Stop sugerido: {stop_analysis['suggested_stop']:.2f}")
                else:
                    st.success("‚úÖ Stop loss bem posicionado")
            
            # An√°lise dos Alvos
            target_analysis = pos_suggestion["target_analysis"]
            if target_analysis:
                st.subheader("Alvos de Pre√ßo")
                if target_analysis.get("targets_balanced"):
                    st.success("‚úÖ Distribui√ß√£o de alvos bem balanceada")
                else:
                    st.warning("‚ö†Ô∏è Considere reajustar os alvos:")
                    suggested = target_analysis["suggested_targets"]
                    cols = st.columns(3)
                    with cols[0]:
                        st.write(f"T1: {suggested['target_1']:.2f}")
                    with cols[1]:
                        st.write(f"T2: {suggested['target_2']:.2f}")
                    with cols[2]:
                        st.write(f"T3: {suggested['target_3']:.2f}")
            
            # Sugest√µes de Realiza√ß√£o
            realization = pos_suggestion["realization"]
            if realization.get("realization_suggestions"):
                st.subheader("Sugest√µes de Realiza√ß√£o")
                for suggestion in realization["realization_suggestions"]:
                    st.info(f"üí∞ {suggestion}")
                    
def render_portfolio_metrics(portfolio: List[PortfolioPosition]):
    """Renderiza m√©tricas gerais do portf√≥lio."""
    
    if not portfolio:
        return
    
    st.subheader("üìà M√©tricas do Portf√≥lio")
    
    # C√°lculo de m√©tricas
    total_value = sum(pos.qty * pos.price_current for pos in portfolio if pos.price_current)
    total_cost = sum(pos.qty * pos.price_entry for pos in portfolio)
    total_pnl = total_value - total_cost
    total_pnl_pct = (total_value / total_cost - 1) * 100
    
    # Layout em colunas
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Valor Total", f"${total_value:,.2f}")
    
    with col2:
        st.metric("P&L", f"${total_pnl:,.2f}", 
                 delta=f"{total_pnl_pct:+.1f}%")
    
    with col3:
        # C√°lculo de diversifica√ß√£o
        n_assets = len(portfolio)
        max_allocation = max((pos.qty * pos.price_current / total_value) 
                           for pos in portfolio if pos.price_current)
        st.metric("Diversifica√ß√£o", 
                 f"{n_assets} ativos",
                 delta=f"Max {max_allocation*100:.1f}% por ativo")